version: "3"
services:
  # Workspace
  workspace:
    image: mcr.microsoft.com/devcontainers/base:bullseye
    volumes:
      # Forwards the local Docker socket to the container.
      - /var/run/docker.sock:/var/run/docker-host.sock
      # Update this to wherever you want VS Code to mount the folder of your project
      - ../:/workspaces/dynasc:cached
    env_file:
      - ../.env
    # Uncomment the next four lines if you will use a ptrace-based debuggers like C++, Go, and Rust.
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    # Overrides default command so things don't shut down after the process ends.
    entrypoint: /usr/local/share/docker-init.sh
    command: sleep infinity
  # DynamoDB
  dynamodb:
    image: amazon/dynamodb-local
    ports:
      - "8000:8000"
    healthcheck:
      test: "curl -s http://localhost:8000 -o /dev/null || exit 1"
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    command: "-jar DynamoDBLocal.jar -sharedDb"
  # DynamoDB Admin
  dynamodb_admin:
    image: aaronshaf/dynamodb-admin
    ports:
      - "8001:8001"
    environment:
      DYNAMO_ENDPOINT: http://dynamodb:8000
    depends_on:
      dynamodb:
        condition: service_healthy
  # DynamoDB Initialize
  dynamodb_initialize:
    image: amazon/aws-cli
    volumes:
      - ../testdata/tables:/tmp/tables
    env_file:
      - ../.env
    entrypoint: >
      bash -c "
        curl http://dynamodb:8000 --retry-connrefused -s --retry 3 > /dev/null;
        for file in /tmp/tables/*
        do
          aws dynamodb --endpoint-url http://dynamodb:8000 create-table --cli-input-yaml file://$${file};
        done
      "
    depends_on:
      dynamodb:
        condition: service_healthy
  # Lambda
  lambda:
    build:
      context: ./lambda
    ports:
      - "8080:8080"
    entrypoint: "/usr/local/bin/aws-lambda-rie /var/runtime/bootstrap"
